# -*- coding: utf-8 -*-
"""Python Learning-2

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1SUurPQIvNVthK1-G3es8Pc8f1uNujGr3
"""

# Ord And Chr
# Encoding Value can be find out using ord

ord("A")

ord("a")

ord("N")

ord("ðŸ™‚")

ord("D")

ord("à¤•")

#Char

chr(68)

chr(2325)

chr(2336)

# Indexing in a String........ Space is also indexing
             # Positive Indexing
                            #   N  I  K  I  T  A
                            #   0  1  2  3  4  5

             # Negative Indexing
                            #   N     I    K     I     T      A
                            #   -6   -5   -4    -3     -2     -1


                            # end contain last value n......and indexing n-1

# Slicing in the String

name="Nikita Jadhav"
name[2]
name[10]

len("Nikita")

# String Slicing

name="Nikita Jadhav"
name[0]

# [Starting ==> Includeding : Ending ==> Excludeding]

name[0:3]

size=len(name)
name[5:size]      #start from 5 indexing and end at last indexing

# This will give whole starting
name[:]

# [Start : End : jump]
name[::2]

# Negative indexing

name[:-2]
name[:-7]

name[-2]

name[-1:0:-1]

name[::-1]

# String methods

name="Nikita Jadhav"
name.capitalize()

name.title()

# name1=name.title()
# name1

name.upper()
name.lower()

name.find("a")

name.count("a")

name.count("Z")

name.index("i")

name

name.replace("a","A")

name.split()

name.split("a")

# isupper()
name="Nikita"
name.isupper()

"N".isupper()

# islower()
name. islower()
"nikita". islower()

# isnumeric()
name.isnumeric()
"21".isnumeric()

# isalpha()

name.isalpha()

# String Formatting

name=input()
age=input()
print("Hey my name is",name,". and my age is",age)

name=input()
age=input()
print("hey my name is {}.my age is {}".format(name,age))

name=input()
age=input()
print(f"hey my name is {name} .My age is {age}")

# String Concatination
a="Nikita"
b="Jadhav"
print(a+b)

print(a+a+a)

print(a+b*3)

("a "              +              "b")

#   Print all vowels of a given string  (a,e,i,o,u)

text="the quick brow fox jumps over the lazy dog"
text

for i in text:
  #check if i in this is vovel
  if i=="a" or i=="e" or i=="i" or i=="o" or i=="u":
   print(i)

# Challenge: Find if a string is pallindrome

# a string is said to be palindrome if the reverse of the string is same
# for example "radar" is a palidrome but "radix" is not palidrome

s=input()
 #rev is s[::-1], usinf string slicing
if s==s[::-1]:
  print("Yes")
else:
  print("No")

# Data Structure

# data structure is a specialized format for organzing,processing,retrieving and stroing data
# want to store data more efficiently in class

# name1="niks"
# name12="chiks"
# name3="miks"
# name4="silks"
# name5="sam"
# name6="ram"
# name7="tan"

#  so this not possible for many values so use use to structure this data efficintly wee use
 # 1) Lists
 # 1) Sets
 # 1) Dict
 # 1) tuples

# Introduction to the Lists
    #----> Ordered collection of data
    #----> Lists are mutable type of datastructure
    #----> It can contain multiple type of values of data
    #----> Lists are changable(Mutable)
    #----> lists are variable
    #----> lists are seperated by Comma(,)


# Creating a list
   #  l=[----------]
   #  l=list(-------)  Example

l=list()
print(type(l))

l1=[1,2,3,4,5,68,90,0]
type(l1)

len(l1)

#accesing data

l1

l1[3]

l1[-len(l1)]

l1[-1]

# Mutablity
l1

id(l1)

l1[0]=9
print(l1)

id(l1)

# iterable

for i in l1:
  print(i)

# List Slicing --->

l=[2,3,5,7,9,4]
print(l)
len(l)
l[0:3]
l[::-1]

l[5:0]

# List Opearations
    #---->Count
    #---->index
    #---->pop
    #---->remove
    #---->sort
    #---->insert
    #---->append
    #---->extend

# Count----> Returns the count of an object
budget = [100,200,150,100]
budget.count(100)

budget.count(500)

# Index----> Returns the first occurance ofthe object

budget

budget.index(150)

name=["Niks","chiks","harry","Emma","Jadu"]
name.index("harry")

# POP : remove and return the last element of a list
name

drop=name.pop()
drop

name

# Remove : remove given object from list

name

name.remove("chiks")

name

# Sort : it sort our list in order

budget

budget.sort()

budget

# Insert : helps to add element at the given index

name

name.insert(1,"Chikss")

name

name.insert(0,"Emma")

name.insert(1,"Sam")

name

# Append : add dobject at the end of list

l=[1,2,3,4,5]
l.append("nikss")
l

l1=[6,7,8,9,10]

l.append(l1)

l

# extend
#it does not consider the other list as a songle object i consider separate element

l=[1,2,3,4,5]
l.extend(l1)

l

s="Nikita"
s

for i in s:
  print(i)

l.extend(s)

l

l.append(s)
l

# Heterogenous Lista
l2=[1,"Niks",2.5,True]

l2

for i in l2:
 print(i)

type(l2)

type(l2[3])

# 2 D List----> List inside List
l1=[1,2,3]
l2=[4,5,6]
l3=[7,8,9]

l=[l1,l2,l3]
l

# indexing of 2D list
(l[1])

l1[0]

l1[2]

l[0][0]

l[1][2]

# Iteration in 2D list
l

for i in l:
 print(i)

l1

for i in l1:
  print(i)

for i in l:
  for j in i:
    print(j)

# Lis Comprehension
for i in range(10):
  print(i**2)

l=[]
for i in range(10):
  l.append(i**2)
print(l)

l=[(i**2) for i in range (10)]
l

# Challenge:
  # Given list of population sensus done by gol. you need to find the toatal population.
  #each element in the list represent total members in family
  # l=[4,6,5,8,9,3,2,4,5,4,3,2,3,4]

l=[4,6,5,8,9,3,2,4,5,4,3,2,3,4]
l

# access all the element of the list
population=0
for i in l:
  population+=i
 #sum the up
print(population)

